from scripts.get_vars import *
import sys
import pandas as pd


DATADIR = Path(config['dataDir'])
OUTDIR = Path(config['outDir'])

#configfile: "configs/basic_config.yaml"

# DATADIR = Path(config['dataDir'])
# OUTDIR = Path(config['outDir'])
# SAMPLEFILE = Path(config['sampleFile'])
# SAMPLES = get_subsamples(SAMPLEFILE)

# Sample Name, Unit, forward reads, reverse reads

sampleInfo = pd.read_csv(config['samples'])
samples_to_merge = (sampleInfo.loc[sampleInfo.groupby('sample')
                    .unit.filter(lambda x: x.nunique() > 1).index]['sample']
                    .unique())
SAMPLES = pd.read_csv(config['samples'], comment='#')['sample'].unique()

include: "rules/preprocess.smk"
include: "rules/assemble.smk"
# include: "rules/quast.smk"
# include: "rules/alignment.smk"
include: "rules/annotate.smk"
# include: "rules/compare_genomes.smk"
include: "rules/call_variants.smk"
# include: "rules/typing.smk"
# include: "rules/profile.smk"
# include: "rules/count.smk"



"""
PREPROCESSING
In the config file, can specify whether to run FastQC before preprocessing, after, both or not at all.
By default, will only run after preprocessing.
"""

if not config['fastqc']:
    rule preprocess:
        input: [OUTDIR/f'clean_reads/{sample}/{sample}.qc.done' for sample in SAMPLES]
elif config['fastqc'] == 'after':
    rule preprocess:
        input:
            clean_files = [OUTDIR/f'clean_reads/{sample}/{sample}.qc.done' for sample in SAMPLES],
            fastqc = [OUTDIR/f'fastqc_clean/{sample}.fastqc_clean.done' for sample in SAMPLES]

elif config['fastqc'] == 'before':
    rule preprocess:
        input: OUTDIR/'fastqc/before.multiqc.done'
elif config['fastqc'] == 'both':
    rule preprocess:
        input: OUTDIR/'fastqc/both.multiqc.done'
else:
    print(f'{config["fastqc"]} is not a recognized option for fastqc')
    sys.exit(1)


rule merge_fastq:
    input: [OUTDIR/f'merged_reads/{sample}/{sample}.merge.done' for sample in SAMPLES]


"""
ASSEMBLY and ANNOTATION
In the config specify whether to use spades or unicycler. Default will be spades
"""
print(SAMPLES)
if config['assembler'] == 'spades':
    GFFs =[OUTDIR/f'assembly/{sample}/{sample}.scaffolds.min200.prokka.done' for sample in SAMPLES]
elif config['assembler'] == 'unicycler':
    GFFs = [OUTDIR/f'unicycler/{config["unimode"]}/{sample}/assembly.prokka.done' for sample in SAMPLES]
else:
    GFFs = []

rule assemble:
    input: GFFs


"""
Variant Calling
"""

VCFs = []
BAMs = []

for ref, samples in config['reference'].items():
    if ref == 'refDir':
        continue
    BAMs += [OUTDIR / f'bams/{sample}/{sample}_to_{ref}.bam' for sample in samples]
    VCFs += [OUTDIR / f'VCF/{sample}/{sample}_to_{ref}.isolate.filtered.vcf' for sample in samples]


rule align:
    input: BAMs

rule varcall:
    input: VCFs

"""
Annotation
"""
if config['assembler'] == 'spades':
    FAAs =[OUTDIR/f'assembly/{sample}/eggnog/{sample}.eggnog.done' for sample in SAMPLES]
elif config['assembler'] == 'unicycler':
    FAAs = [OUTDIR/f'unicycler/{config["unimode"]}/{sample}/eggnog/{sample}.eggnog.done' for sample in SAMPLES]
else:
    FAAs = []

rule annotate:
    input: FAAs


# if config['assembler'] == 'spades':
#
#     rule assemble_only:
#         input: [OUTDIR/f'assembly/{sample}/{sample}.assembly_cleanup.done' for sample in SAMPLES]
#
#     rule assemble:
#         input: [OUTDIR/f'assembly/{sample}/prokka/{sample}.prokka.done' for sample in SAMPLES],
#        # [OUTDIR/f'assembly/{sample}/eggnog/{sample}.eggnog.done' for sample in SAMPLES]
#
#
# elif config['assembler'] == 'unicycler':
#
#     rule assemble:
#         input:[OUTDIR/f'unicycler/{config["unimode"]}/{sample}/{sample}.unicycler.done' for sample in SAMPLES]
#
#     # rule quastCheck:
#     #     input: OUTDIR/f'unicycler/{config["unimode"]}/unicycler_assembly_qc.quast_all.done'
#
# else:
#     print(f'{config["assembler"]} is not a recognized option for assembler. Options: [spades, unicycler]')
#     sys.exit(1)
#
# rule annotate:
#     pass

# rule quastCheck:
#     input: OUTDIR/'quast/assembly_qc.quast_all.done'
#
#
# rule compare_genelen:
#     input: "/science/ansintsova/bioinfocore/aligner_test/data/assembly/Sal/Sal.scaffolds.min500.fasta.genelen.done"
#
# rule compare_genelen_uni:
#     input: "/science/ansintsova/bioinfocore/aligner_test/data/unicycler/normal/Sal/assembly.fasta.genelen.done"
#
# """
#
# VARIANT CALLING
#
# """
#
# rule align:
#     input: [OUTDIR/f'bams/{sub}/{sub}.bwa.done' for sub in SAMPLES]
#
# rule align_with_ref:
#     input: [OUTDIR/f'ref_bams/{sub}/{sub}.refbwa.done' for sub in SAMPLES]
#
# rule alignment_qc:
#     input: [OUTDIR/f'ref_bams/{sample}/{sample}.bam.stats' for sample in SAMPLES]
#
# rule pileup:
#     input: [OUTDIR/f'VCF/{sub}/{sub}.mpileup' for sub in SAMPLES]
#
# rule anVar:
#     input: [OUTDIR/f'VCF/{sub}/{sub}.snpEff.done' for sub in SAMPLES]
#
# rule addGenomeSnpEff:
#     input: OUTDIR/f'VCF/{config["snpEff_reference"]}.snpEff_db.done'
#
# rule call_variants:
#     input: [OUTDIR/f'VCF/{sub}/{sub}.isolate.vcf.done' for sub in SAMPLES]
#
# rule call_vars3:
#     input: [OUTDIR/f'VCF/{sub}/{sub}.f3.vcf.done' for sub in SAMPLES]
#
# rule markDup:
#     input: [OUTDIR/f'bams/{sub}/{sub}.rmdup.bam' for sub in SAMPLES]
#
#
# """
# OTHER
#
# """
#
# rule count_htseq:
#     input: [OUTDIR/f'counts/{sample}/{sample}.tsv' for sample in SAMPLES]
# # Compare Genomes
#
# rule nucmer:
#     input: [OUTDIR/f'mummer/LL23_{sample}.coords' for sample in SAMPLES]
#
# rule runANI:
#     input: [OUTDIR/f'ANI/assembly/{i}_{j}_fastani.out' for i in SAMPLES for j in SAMPLES]
#
# rule motus:
#     input: [OUTDIR/f'motus/{sample}/{sample}.motus' for sample in SAMPLES]
#
# rule fetchMG:
#     input: [OUTDIR/f'fetchMG/{sample}/fetchMG.done' for sample in SAMPLES]
#
# rule whatisit:
#     input: [OUTDIR/f'mash/{sample}/{sample}.distances.tab' for sample in SAMPLES]
#
# rule phylogeny:
#     input: OUTDIR/f'phylophlan/{config["projectName"]}/output_isolates/RAxML_bestTree.input_isolates.tre'
#
#
# rule findAb:
#     input: OUTDIR/f'ariba/summary.done'
#
# rule type:
#     input: [OUTDIR/f'typing/{sub}/{sub}.mlst' for sub in SAMPLES]
#     # env doesn't work on cluster
#
#
# rule serotype:
#     input: [OUTDIR/f'typing/{sub}/output.tsv' for sub in SAMPLES]
#
#
# rule anVar2:
#     input: [OUTDIR/f'VCF/{sub}/{sub}.AF.snpEff.done' for sub in SAMPLES]
#
# rule pangenome:
#     input: [OUTDIR/f'panX/data/{config["projectName"]}/vis/strain_tree.nwk']

# rule gzip:
#     input: '{sample}.fasta',
#     output: '{sample}.fasta.gz',
#     params:
#         qerrfile = '{sample}.gzip.qerr',
#         qoutfile = '{sample}.gzip.qout',
#         scratch = 6000,
#         mem = 7700,
#         time = 1400
#     threads:
#         8
#     shell:
#         'gzip {input}'


# 2021-02-24 Trees for algal metagenomes

# rule algal_tree:
#     #input: '/nfs/nas22/fs2202/biol_micro_bioinf_nccr/piel/padhi/data/fresh_tree/fresh.bac120.user_msa.fasta.iqtree'
#     #input: '/nfs/nas22/fs2202/biol_micro_bioinf_nccr/piel/padhi/data/trees/fresh_tree/fresh.bac120.user_msa.fasta.iqtree'
#     input: '/nfs/nas22/fs2202/biol_micro_bioinf_nccr/piel/padhi/data/trees/sed_tree/sed.bac120.user_msa.fasta.iqtree', '/nfs/nas22/fs2202/biol_micro_bioinf_nccr/piel/padhi/data/trees/2017_2020_tree/2017_2020.bac120.user_msa.fasta.iqtree'
#
